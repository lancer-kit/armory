// generated by goplater -type=PaymentMethod -transform=snake -tprefix=false; DO NOT EDIT
package payment

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
)

var ErrPaymentMethodInvalid = errors.New("PaymentMethod is invalid")

var defPaymentMethodNameToValue = map[string]PaymentMethod{
	"bankcard":     PaymentMethodBankcard,
	"banktransfer": PaymentMethodBanktransfer,
	"ewallet":      PaymentMethodEwallet,
}

var defPaymentMethodValueToName = map[PaymentMethod]string{
	PaymentMethodBankcard:     "bankcard",
	PaymentMethodBanktransfer: "banktransfer",
	PaymentMethodEwallet:      "ewallet",
}

// String is generated so PaymentMethod satisfies fmt.Stringer.
func (r PaymentMethod) String() string {
	s, ok := defPaymentMethodValueToName[r]
	if !ok {
		return fmt.Sprintf("PaymentMethod(%d)", r)
	}
	return s
}

// Validate verifies that value is predefined for PaymentMethod.
func (r PaymentMethod) Validate() error {
	_, ok := defPaymentMethodValueToName[r]
	if !ok {
		return ErrPaymentMethodInvalid
	}
	return nil
}

// MarshalJSON is generated so PaymentMethod satisfies json.Marshaler.
func (r PaymentMethod) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := defPaymentMethodValueToName[r]
	if !ok {
		return nil, fmt.Errorf("PaymentMethod(%d) is invalid value", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so PaymentMethod satisfies json.Unmarshaler.
func (r *PaymentMethod) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PaymentMethod: should be a string, got %s", string(data))
	}
	v, ok := defPaymentMethodNameToValue[s]
	if !ok {
		return fmt.Errorf("PaymentMethod(%q) is invalid value", s)
	}
	*r = v
	return nil
}

// Value is generated so PaymentMethod satisfies db row driver.Valuer.
func (r PaymentMethod) Value() (driver.Value, error) {
	s, ok := defPaymentMethodValueToName[r]
	if !ok {
		return "", nil
	}
	return s, nil
}

// Value is generated so PaymentMethod satisfies db row driver.Scanner.
func (r *PaymentMethod) Scan(src interface{}) error {
	switch src.(type) {
	case string:
		val, _ := defPaymentMethodNameToValue[src.(string)]
		*r = val
		return nil
	case []byte:
		source := src.([]byte)
		var i PaymentMethod
		err := json.Unmarshal(source, &i)
		if err != nil {
			return errors.New("PaymentMethod: can't unmarshal column data")
		}

		*r = i
		return nil
	case int, int8, int32, int64, uint, uint8, uint32, uint64:
		ni := sql.NullInt64{}
		err := ni.Scan(src)
		if err != nil {
			return errors.New("PaymentMethod: can't scan column data into int64")
		}

		*r = PaymentMethod(ni.Int64)
		return nil
	}
	return errors.New("PaymentMethod: invalid type")
}
