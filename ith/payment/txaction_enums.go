// generated by goplater -type=TxAction -transform=none -tprefix=false; DO NOT EDIT
package payment

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
)

var (
	ErrTxActionInvalid = errors.New("TxAction is invalid")

	defTxActionNameToValue = map[string]TxAction{
		"PR": TxActionPurchase,
		"RF": TxActionRefundFull,
		"RP": TxActionRefundPartial,
		"CF": TxActionChargebackFull,
		"CP": TxActionChargebackPartial,
		"RD": TxActionTransferFromRollingReserve,
		"RC": TxActionTransferToRollingReserve,
		"CR": TxActionCorrection,
		"TA": TxActionFee,
	}

	defTxActionValueToName = map[TxAction]string{
		TxActionPurchase:                   "PR",
		TxActionRefundFull:                 "RF",
		TxActionRefundPartial:              "RP",
		TxActionChargebackFull:             "CF",
		TxActionChargebackPartial:          "CP",
		TxActionTransferFromRollingReserve: "RD",
		TxActionTransferToRollingReserve:   "RC",
		TxActionCorrection:                 "CR",
		TxActionFee:                        "TA",
	}
)

// String is generated so TxAction satisfies fmt.Stringer.
func (r TxAction) String() string {
	s, ok := defTxActionValueToName[r]
	if !ok {
		return fmt.Sprintf("TxAction(%d)", r)
	}
	return s
}

// Validate verifies that value is predefined for TxAction.
func (r TxAction) Validate() error {
	_, ok := defTxActionValueToName[r]
	if !ok {
		return ErrTxActionInvalid
	}
	return nil
}

// MarshalJSON is generated so TxAction satisfies json.Marshaler.
func (r TxAction) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := defTxActionValueToName[r]
	if !ok {
		return nil, fmt.Errorf("TxAction(%d) is invalid value", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so TxAction satisfies json.Unmarshaler.
func (r *TxAction) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TxAction: should be a string, got %s", string(data))
	}
	v, ok := defTxActionNameToValue[s]
	if !ok {
		return fmt.Errorf("TxAction(%q) is invalid value", s)
	}
	*r = v
	return nil
}

// Value is generated so TxAction satisfies db row driver.Valuer.
func (r TxAction) Value() (driver.Value, error) {
	j, err := json.Marshal(r)
	return j, err
}

// Value is generated so TxAction satisfies db row driver.Scanner.
func (r *TxAction) Scan(src interface{}) error {
	switch src.(type) {
	case string:
		val, ok := defTxActionNameToValue[src.(string)]
		if !ok {
			return errors.New("TxAction: can't unmarshal column data")
		}
		*r = val
		return nil
	case []byte:
		source := src.([]byte)
		var i TxAction
		err := json.Unmarshal(source, &i)
		if err != nil {
			return errors.New("TxAction: can't unmarshal column data")
		}

		*r = i
		return nil
	case int, int8, int32, int64, uint, uint8, uint32, uint64:
		ni := sql.NullInt64{}
		err := ni.Scan(src)
		if err != nil {
			return errors.New("TxAction: can't scan column data into int64")
		}

		*r = TxAction(ni.Int64)
		return nil
	}
	return errors.New("TxAction: invalid type")
}
