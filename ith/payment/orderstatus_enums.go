// generated by goplater -type=OrderStatus -transform=snake -tprefix=false; DO NOT EDIT
package payment

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
)

var (
	ErrOrderStatusInvalid = errors.New("OrderStatus is invalid")

	defOrderStatusNameToValue = map[string]OrderStatus{
		"DF": OrderDraft,
		"DE": OrderDeleted,
		"SE": OrderSent,
		"CA": OrderCancelled,
		"PA": OrderPaid,
		"RF": OrderRefunded,
		"RP": OrderPartiallyRefunded,
		"MP": OrderMarkedPaid,
		"MR": OrderMarkedRefunded,
		"CF": OrderChargebacked,
		"CP": OrderPartiallyChargebacked,
		"EX": OrderExpired,
	}

	defOrderStatusValueToName = map[OrderStatus]string{
		OrderDraft:                 "DF",
		OrderDeleted:               "DE",
		OrderSent:                  "SE",
		OrderCancelled:             "CA",
		OrderPaid:                  "PA",
		OrderRefunded:              "RF",
		OrderPartiallyRefunded:     "RP",
		OrderMarkedPaid:            "MP",
		OrderMarkedRefunded:        "MR",
		OrderChargebacked:          "CF",
		OrderPartiallyChargebacked: "CP",
		OrderExpired:               "EX",
	}
)

// String is generated so OrderStatus satisfies fmt.Stringer.
func (r OrderStatus) String() string {
	s, ok := defOrderStatusValueToName[r]
	if !ok && r > 0 {
		return fmt.Sprintf("OrderStatus(%d)", r)
	}
	return s
}

// Validate verifies that value is predefined for OrderStatus.
func (r OrderStatus) Validate() error {
	_, ok := defOrderStatusValueToName[r]
	if !ok {
		return ErrOrderStatusInvalid
	}
	return nil
}

// MarshalJSON is generated so OrderStatus satisfies json.Marshaler.
func (r OrderStatus) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := defOrderStatusValueToName[r]
	if !ok {
		return nil, fmt.Errorf("OrderStatus(%d) is invalid value", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so OrderStatus satisfies json.Unmarshaler.
func (r *OrderStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("OrderStatus: should be a string, got %s", string(data))
	}
	v, ok := defOrderStatusNameToValue[s]
	if !ok {
		return fmt.Errorf("OrderStatus(%q) is invalid value", s)
	}
	*r = v
	return nil
}

// Value is generated so OrderStatus satisfies db row driver.Valuer.
func (r OrderStatus) Value() (driver.Value, error) {
	s, ok := defOrderStatusValueToName[r]
	if !ok {
		return "", nil
	}
	return s, nil
}

// Value is generated so OrderStatus satisfies db row driver.Scanner.
func (r *OrderStatus) Scan(src interface{}) error {
	switch src.(type) {
	case string:
		val, _ := defOrderStatusNameToValue[src.(string)]
		*r = val
		return nil
	case []byte:
		source := src.([]byte)
		var i OrderStatus
		err := json.Unmarshal(source, &i)
		if err != nil {
			return errors.New("OrderStatus: can't unmarshal column data")
		}

		*r = i
		return nil
	case int, int8, int32, int64, uint, uint8, uint32, uint64:
		ni := sql.NullInt64{}
		err := ni.Scan(src)
		if err != nil {
			return errors.New("OrderStatus: can't scan column data into int64")
		}

		*r = OrderStatus(ni.Int64)
		return nil
	}
	return errors.New("OrderStatus: invalid type")
}
