// generated by goplater -type=DocumentType -transform=none -tprefix=false; DO NOT EDIT
package kyc

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
)

func init() {
	// stub usage of json for situation when
	// (Un)MarshalJSON methods will be omitted
	_ = json.Delim('s')

	// stub usage of sql/driver for situation when
	// Scan/Value methods will be omitted
	_ = driver.Bool
	_ = sql.LevelDefault
}

var ErrDocumentTypeInvalid = errors.New("DocumentType is invalid")

func init() {
	var v DocumentType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		defDocumentTypeNameToValue = map[string]DocumentType{
			interface{}(DocumentTypeIDN).(fmt.Stringer).String(): DocumentTypeIDN,
			interface{}(DocumentTypeUBL).(fmt.Stringer).String(): DocumentTypeUBL,
			interface{}(DocumentTypeSLF).(fmt.Stringer).String(): DocumentTypeSLF,
		}
	}
}

var defDocumentTypeNameToValue = map[string]DocumentType{
	"IDN": DocumentTypeIDN,
	"UBL": DocumentTypeUBL,
	"SLF": DocumentTypeSLF,
}

var defDocumentTypeValueToName = map[DocumentType]string{
	DocumentTypeIDN: "IDN",
	DocumentTypeUBL: "UBL",
	DocumentTypeSLF: "SLF",
}

// String is generated so DocumentType satisfies fmt.Stringer.
func (r DocumentType) String() string {
	s, ok := defDocumentTypeValueToName[r]
	if !ok {
		return fmt.Sprintf("DocumentType(%d)", r)
	}
	return s
}

// Validate verifies that value is predefined for DocumentType.
func (r DocumentType) Validate() error {
	_, ok := defDocumentTypeValueToName[r]
	if !ok {
		return ErrDocumentTypeInvalid
	}
	return nil
}

// MarshalJSON is generated so DocumentType satisfies json.Marshaler.
func (r DocumentType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := defDocumentTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("DocumentType(%d) is invalid value", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so DocumentType satisfies json.Unmarshaler.
func (r *DocumentType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DocumentType: should be a string, got %s", string(data))
	}
	v, ok := defDocumentTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("DocumentType(%q) is invalid value", s)
	}
	*r = v
	return nil
}

// Value is generated so DocumentType satisfies db row driver.Valuer.
func (r DocumentType) Value() (driver.Value, error) {
	j, err := json.Marshal(r)
	return j, err
}

// Value is generated so DocumentType satisfies db row driver.Scanner.
func (r *DocumentType) Scan(src interface{}) error {
	switch src.(type) {
	case string:
		val, ok := defDocumentTypeNameToValue[src.(string)]
		if !ok {
			return errors.New("DocumentType: can't unmarshal column data")
		}
		*r = val
		return nil
	case []byte:
		source := src.([]byte)
		var i DocumentType
		err := json.Unmarshal(source, &i)
		if err != nil {
			return errors.New("DocumentType: can't unmarshal column data")
		}

		*r = i
		return nil
	case int, int8, int32, int64, uint, uint8, uint32, uint64:
		ni := sql.NullInt64{}
		err := ni.Scan(src)
		if err != nil {
			return errors.New("DocumentType: can't scan column data into int64")
		}

		*r = DocumentType(ni.Int64)
		return nil
	}
	return errors.New("DocumentType: invalid type")
}
