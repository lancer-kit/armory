// generated by goplater -type=DocumentSubType -transform=none -tprefix=false; DO NOT EDIT
package kyc

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
)

func init() {
	// stub usage of json for situation when
	// (Un)MarshalJSON methods will be omitted
	_ = json.Delim('s')

	// stub usage of sql/driver for situation when
	// Scan/Value methods will be omitted
	_ = driver.Bool
	_ = sql.LevelDefault
}

var ErrDocumentSubTypeInvalid = errors.New("DocumentSubType is invalid")

func init() {
	var v DocumentSubType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		defDocumentSubTypeNameToValue = map[string]DocumentSubType{
			interface{}(DocumentSubTypeIDL).(fmt.Stringer).String(): DocumentSubTypeIDL,
			interface{}(DocumentSubTypeIRC).(fmt.Stringer).String(): DocumentSubTypeIRC,
			interface{}(DocumentSubTypeIDC).(fmt.Stringer).String(): DocumentSubTypeIDC,
			interface{}(DocumentSubTypeIRP).(fmt.Stringer).String(): DocumentSubTypeIRP,
			interface{}(DocumentSubTypeIPS).(fmt.Stringer).String(): DocumentSubTypeIPS,
			interface{}(DocumentSubTypeUBL).(fmt.Stringer).String(): DocumentSubTypeUBL,
			interface{}(DocumentSubTypeUCS).(fmt.Stringer).String(): DocumentSubTypeUCS,
			interface{}(DocumentSubTypeUHR).(fmt.Stringer).String(): DocumentSubTypeUHR,
			interface{}(DocumentSubTypeUPL).(fmt.Stringer).String(): DocumentSubTypeUPL,
			interface{}(DocumentSubTypeUGI).(fmt.Stringer).String(): DocumentSubTypeUGI,
			interface{}(DocumentSubTypeSLF).(fmt.Stringer).String(): DocumentSubTypeSLF,
		}
	}
}

var defDocumentSubTypeNameToValue = map[string]DocumentSubType{
	"IDL": DocumentSubTypeIDL,
	"IRC": DocumentSubTypeIRC,
	"IDC": DocumentSubTypeIDC,
	"IRP": DocumentSubTypeIRP,
	"IPS": DocumentSubTypeIPS,
	"UBL": DocumentSubTypeUBL,
	"UCS": DocumentSubTypeUCS,
	"UHR": DocumentSubTypeUHR,
	"UPL": DocumentSubTypeUPL,
	"UGI": DocumentSubTypeUGI,
	"SLF": DocumentSubTypeSLF,
}

var defDocumentSubTypeValueToName = map[DocumentSubType]string{
	DocumentSubTypeIDL: "IDL",
	DocumentSubTypeIRC: "IRC",
	DocumentSubTypeIDC: "IDC",
	DocumentSubTypeIRP: "IRP",
	DocumentSubTypeIPS: "IPS",
	DocumentSubTypeUBL: "UBL",
	DocumentSubTypeUCS: "UCS",
	DocumentSubTypeUHR: "UHR",
	DocumentSubTypeUPL: "UPL",
	DocumentSubTypeUGI: "UGI",
	DocumentSubTypeSLF: "SLF",
}

// String is generated so DocumentSubType satisfies fmt.Stringer.
func (r DocumentSubType) String() string {
	s, ok := defDocumentSubTypeValueToName[r]
	if !ok {
		return fmt.Sprintf("DocumentSubType(%d)", r)
	}
	return s
}

// Validate verifies that value is predefined for DocumentSubType.
func (r DocumentSubType) Validate() error {
	_, ok := defDocumentSubTypeValueToName[r]
	if !ok {
		return ErrDocumentSubTypeInvalid
	}
	return nil
}

// MarshalJSON is generated so DocumentSubType satisfies json.Marshaler.
func (r DocumentSubType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := defDocumentSubTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("DocumentSubType(%d) is invalid value", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so DocumentSubType satisfies json.Unmarshaler.
func (r *DocumentSubType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DocumentSubType: should be a string, got %s", string(data))
	}
	v, ok := defDocumentSubTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("DocumentSubType(%q) is invalid value", s)
	}
	*r = v
	return nil
}

// Value is generated so DocumentSubType satisfies db row driver.Valuer.
func (r DocumentSubType) Value() (driver.Value, error) {
	j, err := json.Marshal(r)
	return j, err
}

// Value is generated so DocumentSubType satisfies db row driver.Scanner.
func (r *DocumentSubType) Scan(src interface{}) error {
	switch src.(type) {
	case string:
		val, ok := defDocumentSubTypeNameToValue[src.(string)]
		if !ok {
			return errors.New("DocumentSubType: can't unmarshal column data")
		}
		*r = val
		return nil
	case []byte:
		source := src.([]byte)
		var i DocumentSubType
		err := json.Unmarshal(source, &i)
		if err != nil {
			return errors.New("DocumentSubType: can't unmarshal column data")
		}

		*r = i
		return nil
	case int, int8, int32, int64, uint, uint8, uint32, uint64:
		ni := sql.NullInt64{}
		err := ni.Scan(src)
		if err != nil {
			return errors.New("DocumentSubType: can't scan column data into int64")
		}

		*r = DocumentSubType(ni.Int64)
		return nil
	}
	return errors.New("DocumentSubType: invalid type")
}
